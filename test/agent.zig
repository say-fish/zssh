// SPDX-License-Identifier: GPL-3.0-only
const std = @import("std");
const zssh = @import("zssh");

const Agent = zssh.agent.Agent;
const Client = zssh.agent.Client;

const expect = std.testing.expect;
const expect_equal = std.testing.expectEqual;
const expect_equal_strings = std.testing.expectEqualStrings;
const expect_error = std.testing.expectError;

fn decode(comptime T: type, bytes: []const u8) !T {
    const msg_len = std.mem.readInt(u32, bytes[0..4], .big);

    try expect_equal(bytes.len - 4, msg_len);

    const decoded_len, const msg = try zssh.agent.decode(T, bytes[4 .. 4 + msg_len]);

    std.debug.assert(decoded_len == msg_len);

    return msg;
}

test "can parse SSH_AGENTC_REQUEST_IDENTITIES" {
    const bytes = [_]u8{ 0x00, 0x00, 0x00, 0x01, 0x0B };

    try expect_equal(Client.request_identities, try decode(Client, &bytes));
}

test "invalid client msg" {
    const bytes = [_]u8{ 0x00, 0x00, 0x00, 0x01, 0x0C };

    try expect_error(error.InvalidData, decode(Client, &bytes));
}

test Client {
    const too_short = [_]u8{ 0x00, 0x00, 0x00 };

    try expect_error(error.MessageTooShort, Client.from_bytes(&too_short));

    const mismatch = [_]u8{ 0x00, 0x00, 0x00, 0xAA, 0x00 };

    try expect_error(error.MsgLenMismatch, Client.from_bytes(&mismatch));
}

test "decode AddIdentity" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x00, 0x85, 0x11, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68,
        0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20,
        0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27,
        0x2e, 0x0a, 0xb7, 0x0a, 0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef,
        0x7f, 0x3a, 0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x40,
        0x2e, 0x42, 0x1c, 0xd6, 0x38, 0xab, 0xf3, 0x1e, 0x5c, 0x3e, 0x02, 0x61,
        0x20, 0xe5, 0xb4, 0xa5, 0x36, 0x7a, 0xe3, 0x45, 0xf2, 0x67, 0xa3, 0x56,
        0xf1, 0x47, 0x9c, 0x2a, 0x89, 0x4b, 0x45, 0xa6, 0xc2, 0xd0, 0x30, 0xd1,
        0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a,
        0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda,
        0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x09, 0x6c, 0x6f, 0x63, 0x61,
        0x6c, 0x68, 0x6f, 0x73, 0x74
    }; // zig fmt: on

    const msg = try decode(Client, &bytes);

    try expect_equal(
        zssh.agent.Client.add_identity,
        std.meta.activeTag(msg),
    );
    try expect_equal(
        zssh.agent.Sk.ed,
        std.meta.activeTag(msg.add_identity.key),
    );

    try expect_equal(msg, try Client.from_bytes(&bytes));
}

test "decode Signature" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x01, 0x44, 0x0d, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00,
        0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39,
        0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f, 0x4d, 0xbd,
        0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a, 0x68, 0x69, 0xa4, 0xec,
        0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f,
        0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x40, 0x74, 0x7c, 0x79, 0x32,
        0x4c, 0xbd, 0xca, 0xde, 0x25, 0x6d, 0x94, 0xcb, 0x94, 0xc8, 0x04, 0xa1,
        0x77, 0x18, 0x2e, 0x4d, 0x16, 0xd3, 0xa7, 0x33, 0x92, 0x21, 0xa1, 0x57,
        0x60, 0x7c, 0x7d, 0xea, 0xd8, 0xe8, 0xe4, 0x3d, 0x6f, 0x85, 0xe5, 0x7a,
        0x39, 0xcb, 0xe7, 0x6e, 0xf0, 0xc5, 0x66, 0xd8, 0xc9, 0x52, 0x67, 0x1e,
        0x70, 0x77, 0x6e, 0x6e, 0x97, 0x0a, 0x42, 0x21, 0x96, 0x28, 0x5e, 0x25,
        0x32, 0x00, 0x00, 0x00, 0x04, 0x6d, 0x6c, 0x73, 0x6f, 0x00, 0x00, 0x00,
        0x0e, 0x73, 0x73, 0x68, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
        0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x23, 0x70, 0x75, 0x62, 0x6c, 0x69,
        0x63, 0x6b, 0x65, 0x79, 0x2d, 0x68, 0x6f, 0x73, 0x74, 0x62, 0x6f, 0x75,
        0x6e, 0x64, 0x2d, 0x76, 0x30, 0x30, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73,
        0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x73,
        0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00,
        0x00, 0x33, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64,
        0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30,
        0xd1, 0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7,
        0x0a, 0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a,
        0xda, 0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00,
        0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39,
        0x00, 0x00, 0x00, 0x20, 0x11, 0xdf, 0xf7, 0x5f, 0x5b, 0xa3, 0xf8, 0x56,
        0x08, 0xaa, 0x42, 0xaa, 0x7b, 0x7d, 0x74, 0xe5, 0x05, 0x2b, 0x9d, 0xe0,
        0xe5, 0xeb, 0x0f, 0x16, 0xa4, 0xd9, 0xe2, 0x64, 0xc6, 0x77, 0x7f, 0xc3,
        0x00, 0x00, 0x00, 0x00
    }; // zig fmt: on

    const msg = try decode(Client, &bytes);

    try expect_equal(Client.sign_request, std.meta.activeTag(msg));
    try expect_equal(
        zssh.openssh.public.Key.ed,
        std.meta.activeTag(msg.sign_request.key),
    );
    try expect_equal(@as(u32, 0x00), msg.sign_request.flags);

    try expect_equal(msg, try Client.from_bytes(&bytes));
}

test "decode Failure" {
    const bytes = [_]u8{ 0x00, 0x00, 0x00, 0x01, 0x05 };

    const msg = try decode(Agent, &bytes);

    try expect_equal(Agent.failure, std.meta.activeTag(msg));
    try expect_equal(msg, try Agent.from_bytes(&bytes));
}

test "decode Success" {
    const bytes = [_]u8{ 0x00, 0x00, 0x00, 0x01, 0x06 };

    const msg = try decode(Agent, &bytes);
    try expect_equal(Agent.success, std.meta.activeTag(msg));

    try expect_equal(msg, try Agent.from_bytes(&bytes));
}

test "decode SignResponse" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x00, 0x58, 0x0e, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00,
        0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39,
        0x00, 0x00, 0x00, 0x40, 0x51, 0x83, 0xe6, 0x3e, 0x0e, 0x72, 0xa4, 0xe9,
        0x93, 0x4a, 0x4f, 0x48, 0x53, 0xa9, 0x82, 0x77, 0xa1, 0x42, 0x41, 0x46,
        0xf5, 0xf9, 0xb3, 0x5f, 0xdf, 0x86, 0xae, 0xa9, 0xe0, 0x9d, 0x03, 0xa7,
        0x01, 0x66, 0xc0, 0xad, 0xdf, 0xe8, 0xee, 0x8a, 0x3b, 0x3e, 0xf0, 0xe7,
        0x70, 0x30, 0xc5, 0x40, 0xab, 0xc0, 0x68, 0xe5, 0xf4, 0x27, 0x20, 0xe2,
        0x0b, 0x3c, 0x18, 0xeb, 0xd2, 0xa6, 0x8e, 0x0a
    }; // zig fmt: on

    const msg = try decode(Agent, &bytes);

    try expect_equal(Agent.sign_response, std.meta.activeTag(msg));
    try expect_equal(
        zssh.openssh.signature.Signature.ed,
        std.meta.activeTag(msg.sign_response.signature),
    );

    try expect_equal(msg, try Agent.from_bytes(&bytes));
}

test "decode IdentitiesAnswer" {
    // zig fmt: off
    const bytes = [_]u8{
        0x00, 0x00, 0x00, 0x49, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x33, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32,
        0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30, 0xd1,
        0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a,
        0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda,
        0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x09, 0x6c, 0x6f, 0x63, 0x61,
        0x6c, 0x68, 0x6f, 0x73, 0x74
    };
    // zig fmt: on

    const msg = try decode(Agent, &bytes);

    try expect_equal(Agent.identities_answer, std.meta.activeTag(msg));

    var it = msg.identities_answer.iter().?;

    while (try it.next()) |pk| {
        try expect_equal(zssh.openssh.public.Key.ed, std.meta.activeTag(pk.key));
    }

    std.debug.assert(it.done());
}

test "decode IdentitiesAnswer (no keys)" {
    const bytes = [_]u8{ 0x00, 0x00, 0x00, 0x05, 0x0c, 0x00, 0x00, 0x00, 0x00 };

    const msg = try decode(Agent, &bytes);
    try expect_equal(Agent.identities_answer, std.meta.activeTag(msg));
    try expect_equal(0, msg.identities_answer.nkeys);
    try expect_equal(null, msg.identities_answer.iter());
}

test "decode RemoveIdentity" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x00, 0x38, 0x12, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00,
        0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39,
        0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f, 0x4d, 0xbd,
        0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a, 0x68, 0x69, 0xa4, 0xec,
        0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f
    }; // zig fmt: on

    const msg = try decode(Client, &bytes);

    try expect_equal(Client.remove_identity, std.meta.activeTag(msg));
    try expect_equal(zssh.openssh.public.Key.ed, std.meta.activeTag(msg.remove_identity.key));
}

test "decode SignRequest" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x01, 0x44, 0x0d, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00,
        0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39,
        0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f, 0x4d, 0xbd,
        0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a, 0x68, 0x69, 0xa4, 0xec,
        0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f,
        0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x40, 0xe8, 0x1c, 0xcc, 0x8a,
        0xb2, 0x6b, 0xf1, 0xf2, 0x82, 0x3b, 0xf7, 0xe4, 0xb7, 0x89, 0xdf, 0x28,
        0x9d, 0xbc, 0x67, 0xeb, 0x52, 0x43, 0x48, 0x20, 0xef, 0x08, 0x7d, 0xa4,
        0xd8, 0xda, 0xd0, 0xbe, 0xb0, 0x2f, 0x5a, 0x6e, 0x4a, 0x7b, 0x6e, 0x62,
        0x29, 0xd3, 0x99, 0x7e, 0x54, 0x17, 0x44, 0x54, 0xaa, 0x04, 0x3b, 0x86,
        0xc3, 0x53, 0xaa, 0xa8, 0xab, 0x9d, 0x3f, 0xb6, 0x51, 0x03, 0x16, 0xa2,
        0x32, 0x00, 0x00, 0x00, 0x04, 0x6d, 0x6c, 0x73, 0x6f, 0x00, 0x00, 0x00,
        0x0e, 0x73, 0x73, 0x68, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
        0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x23, 0x70, 0x75, 0x62, 0x6c, 0x69,
        0x63, 0x6b, 0x65, 0x79, 0x2d, 0x68, 0x6f, 0x73, 0x74, 0x62, 0x6f, 0x75,
        0x6e, 0x64, 0x2d, 0x76, 0x30, 0x30, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73,
        0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x73,
        0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00,
        0x00, 0x33, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64,
        0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30,
        0xd1, 0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7,
        0x0a, 0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a,
        0xda, 0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00,
        0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39,
        0x00, 0x00, 0x00, 0x20, 0x11, 0xdf, 0xf7, 0x5f, 0x5b, 0xa3, 0xf8, 0x56,
        0x08, 0xaa, 0x42, 0xaa, 0x7b, 0x7d, 0x74, 0xe5, 0x05, 0x2b, 0x9d, 0xe0,
        0xe5, 0xeb, 0x0f, 0x16, 0xa4, 0xd9, 0xe2, 0x64, 0xc6, 0x77, 0x7f, 0xc3,
        0x00, 0x00, 0x00, 0x00
    }; // zig fmt: on

    const msg = try decode(Client, &bytes);

    try expect_equal(Client.sign_request, std.meta.activeTag(msg));
    try expect_equal(
        zssh.openssh.public.Key.ed,
        std.meta.activeTag(msg.sign_request.key),
    );

    // TODO: msg.sign_request.data
}

test "decode Lock" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x00, 0x08, 0x16, 0x00, 0x00, 0x00, 0x03, 0x31, 0x32, 0x33,
    }; // zig fmt: on

    const msg = try decode(Client, &bytes);

    try expect_equal(Client.lock, std.meta.activeTag(msg));
    try expect_equal_strings("123", msg.lock.passphrase);
}

test "decode Unlock" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x00, 0x08, 0x17, 0x00, 0x00, 0x00, 0x03, 0x31, 0x32, 0x33,
    }; // zig fmt: on

    const msg = try decode(Client, &bytes);

    try expect_equal(Client.unlock, std.meta.activeTag(msg));
    try expect_equal_strings("123", msg.unlock.passphrase);
}

test "decode Extension (SessionBind)" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x00, 0xf0, 0x1b, 0x00, 0x00, 0x00, 0x18, 0x73, 0x65, 0x73,
        0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x40, 0x6f, 0x70,
        0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x00,
        0x33, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32,
        0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20, 0x11, 0xdf, 0xf7, 0x5f,
        0x5b, 0xa3, 0xf8, 0x56, 0x08, 0xaa, 0x42, 0xaa, 0x7b, 0x7d, 0x74, 0xe5,
        0x05, 0x2b, 0x9d, 0xe0, 0xe5, 0xeb, 0x0f, 0x16, 0xa4, 0xd9, 0xe2, 0x64,
        0xc6, 0x77, 0x7f, 0xc3, 0x00, 0x00, 0x00, 0x40, 0x4b, 0xd3, 0xc6, 0xca,
        0xeb, 0xa6, 0xc9, 0x86, 0xee, 0x45, 0x0a, 0x03, 0xfb, 0x8b, 0x60, 0xfb,
        0xaf, 0x9f, 0x40, 0x25, 0x09, 0x72, 0x5d, 0xe8, 0x8c, 0xc6, 0xb3, 0x10,
        0x0b, 0x13, 0x06, 0x41, 0x72, 0x41, 0x77, 0x69, 0x16, 0xb5, 0x94, 0x65,
        0x4e, 0xac, 0x47, 0xb0, 0x0c, 0x97, 0x59, 0xf5, 0xbd, 0xd2, 0x23, 0x4c,
        0x41, 0xf3, 0x2b, 0x3d, 0xaa, 0xbb, 0xbb, 0x6e, 0xad, 0x04, 0xbf, 0xdb,
        0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d,
        0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x40, 0x0b,
        0xb7, 0x0e, 0xdc, 0xd5, 0x6b, 0x5e, 0xe4, 0x40, 0x03, 0x7d, 0x58, 0x13,
        0x9a, 0xce, 0xdf, 0x49, 0xd7, 0x54, 0xc8, 0x6a, 0xac, 0x46, 0x7f, 0x3d,
        0xac, 0xb1, 0xec, 0xe8, 0xaa, 0x0e, 0x25, 0xcf, 0x29, 0xe6, 0xd8, 0x49,
        0x1d, 0xf3, 0xa4, 0x17, 0xf9, 0x8d, 0xd1, 0xb2, 0x5e, 0x94, 0xb6, 0xc0,
        0x4f, 0xb3, 0x90, 0x88, 0x42, 0xc4, 0x2c, 0x1e, 0xe9, 0xa4, 0x0c, 0x7c,
        0x4e, 0xc0, 0x07, 0x00
    }; // zig fmt: on

    const msg = try decode(Client, &bytes);

    try expect_equal(Client.extension, std.meta.activeTag(msg));
    try expect_equal(
        Client.Extension.@"session-bind@openssh.com",
        std.meta.activeTag(msg.extension),
    );
}

test "decode AddIdConstrained" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x00, 0x8a, 0x19, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68,
        0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20,
        0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27,
        0x2e, 0x0a, 0xb7, 0x0a, 0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef,
        0x7f, 0x3a, 0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x40,
        0x2e, 0x42, 0x1c, 0xd6, 0x38, 0xab, 0xf3, 0x1e, 0x5c, 0x3e, 0x02, 0x61,
        0x20, 0xe5, 0xb4, 0xa5, 0x36, 0x7a, 0xe3, 0x45, 0xf2, 0x67, 0xa3, 0x56,
        0xf1, 0x47, 0x9c, 0x2a, 0x89, 0x4b, 0x45, 0xa6, 0xc2, 0xd0, 0x30, 0xd1,
        0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a,
        0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda,
        0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x09, 0x6c, 0x6f, 0x63, 0x61,
        0x6c, 0x68, 0x6f, 0x73, 0x74, 0x01, 0x00, 0x00, 0x00, 0x0a
    }; // zig fmt: on

    const refrences = [_]Client.AddIdConstrained.Constraint{
        .{ .lifetime = .{ .sec = 10 } },
    };

    const msg = try decode(Client, &bytes);

    var it = msg.add_id_constrained.constraints.iter();

    for (refrences) |refrence| {
        try expect_equal(refrence, try it.next());
    }

    try expect(it.done());
}

test "decoded AddIdConstrained" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x00, 0x8b, 0x19, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68,
        0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20,
        0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27,
        0x2e, 0x0a, 0xb7, 0x0a, 0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef,
        0x7f, 0x3a, 0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x40,
        0x2e, 0x42, 0x1c, 0xd6, 0x38, 0xab, 0xf3, 0x1e, 0x5c, 0x3e, 0x02, 0x61,
        0x20, 0xe5, 0xb4, 0xa5, 0x36, 0x7a, 0xe3, 0x45, 0xf2, 0x67, 0xa3, 0x56,
        0xf1, 0x47, 0x9c, 0x2a, 0x89, 0x4b, 0x45, 0xa6, 0xc2, 0xd0, 0x30, 0xd1,
        0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a,
        0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda,
        0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x09, 0x6c, 0x6f, 0x63, 0x61,
        0x6c, 0x68, 0x6f, 0x73, 0x74, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x02
    }; // zig fmt: on

    const refrences = [_]Client.AddIdConstrained.Constraint{
        .{ .lifetime = .{ .sec = 10 } },
        .confirm,
    };

    const msg = try decode(Client, &bytes);

    var it = msg.add_id_constrained.constraints.iter();

    for (refrences) |refrence| {
        try expect_equal(refrence, try it.next());
    }

    try expect(it.done());
}
