// SPDX-License-Identifier: GPL-3.0-only
const std = @import("std");

const openssh = @import("openssh");
const zssh = @import("zssh");

const Agent = openssh.agent.Agent;
const Client = openssh.agent.Client;

const expect = std.testing.expect;
const expect_equal = std.testing.expectEqual;
const expect_equal_strings = std.testing.expectEqualStrings;
const expect_equal_slices = std.testing.expectEqualSlices;
const expect_error = std.testing.expectError;

fn decode(comptime T: type, bytes: []const u8) !T {
    const msg_len = std.mem.readInt(u32, bytes[0..4], .big);

    try expect_equal(bytes.len - 4, msg_len);

    const decoded_len, const msg = try zssh.agent.decode(T, bytes[4 .. 4 + msg_len]);

    std.debug.assert(decoded_len == msg_len);

    return msg;
}

test "invalid client msg" {
    const bytes = [_]u8{ 0x00, 0x00, 0x00, 0x01, 0x0C };

    try expect_error(error.InvalidData, decode(Client, &bytes));
}

test Client {
    const too_short = [_]u8{ 0x00, 0x00, 0x00 };

    try expect_error(error.MessageTooShort, Client.from_bytes(&too_short));

    const mismatch = [_]u8{ 0x00, 0x00, 0x00, 0xAA, 0x00 };

    try expect_error(error.MsgLenMismatch, Client.from_bytes(&mismatch));
}

test "decode RequestIdentities" {
    const bytes = [_]u8{ 0x00, 0x00, 0x00, 0x01, 0x0B };

    try expect_equal(Client.request_identities, try decode(Client, &bytes));
}

test "decode AddIdentity" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x00, 0x85, 0x11, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68,
        0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20,
        0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27,
        0x2e, 0x0a, 0xb7, 0x0a, 0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef,
        0x7f, 0x3a, 0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x40,
        0x2e, 0x42, 0x1c, 0xd6, 0x38, 0xab, 0xf3, 0x1e, 0x5c, 0x3e, 0x02, 0x61,
        0x20, 0xe5, 0xb4, 0xa5, 0x36, 0x7a, 0xe3, 0x45, 0xf2, 0x67, 0xa3, 0x56,
        0xf1, 0x47, 0x9c, 0x2a, 0x89, 0x4b, 0x45, 0xa6, 0xc2, 0xd0, 0x30, 0xd1,
        0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a,
        0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda,
        0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x09, 0x6c, 0x6f, 0x63, 0x61,
        0x6c, 0x68, 0x6f, 0x73, 0x74
    }; // zig fmt: on

    const msg = try decode(Client, &bytes);

    try expect_equal(
        Client.add_identity,
        std.meta.activeTag(msg),
    );
    try expect_equal(
        openssh.private.wire.Key.ed,
        std.meta.activeTag(msg.add_identity.key),
    );

    try expect_equal(msg, try Client.from_bytes(&bytes));
}

test "decode Signature" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x01, 0x44, 0x0d, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00,
        0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39,
        0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f, 0x4d, 0xbd,
        0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a, 0x68, 0x69, 0xa4, 0xec,
        0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f,
        0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x40, 0x74, 0x7c, 0x79, 0x32,
        0x4c, 0xbd, 0xca, 0xde, 0x25, 0x6d, 0x94, 0xcb, 0x94, 0xc8, 0x04, 0xa1,
        0x77, 0x18, 0x2e, 0x4d, 0x16, 0xd3, 0xa7, 0x33, 0x92, 0x21, 0xa1, 0x57,
        0x60, 0x7c, 0x7d, 0xea, 0xd8, 0xe8, 0xe4, 0x3d, 0x6f, 0x85, 0xe5, 0x7a,
        0x39, 0xcb, 0xe7, 0x6e, 0xf0, 0xc5, 0x66, 0xd8, 0xc9, 0x52, 0x67, 0x1e,
        0x70, 0x77, 0x6e, 0x6e, 0x97, 0x0a, 0x42, 0x21, 0x96, 0x28, 0x5e, 0x25,
        0x32, 0x00, 0x00, 0x00, 0x04, 0x6d, 0x6c, 0x73, 0x6f, 0x00, 0x00, 0x00,
        0x0e, 0x73, 0x73, 0x68, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
        0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x23, 0x70, 0x75, 0x62, 0x6c, 0x69,
        0x63, 0x6b, 0x65, 0x79, 0x2d, 0x68, 0x6f, 0x73, 0x74, 0x62, 0x6f, 0x75,
        0x6e, 0x64, 0x2d, 0x76, 0x30, 0x30, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73,
        0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x73,
        0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00,
        0x00, 0x33, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64,
        0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30,
        0xd1, 0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7,
        0x0a, 0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a,
        0xda, 0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00,
        0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39,
        0x00, 0x00, 0x00, 0x20, 0x11, 0xdf, 0xf7, 0x5f, 0x5b, 0xa3, 0xf8, 0x56,
        0x08, 0xaa, 0x42, 0xaa, 0x7b, 0x7d, 0x74, 0xe5, 0x05, 0x2b, 0x9d, 0xe0,
        0xe5, 0xeb, 0x0f, 0x16, 0xa4, 0xd9, 0xe2, 0x64, 0xc6, 0x77, 0x7f, 0xc3,
        0x00, 0x00, 0x00, 0x00
    }; // zig fmt: on

    const msg = try decode(Client, &bytes);

    try expect_equal(Client.sign_request, std.meta.activeTag(msg));
    try expect_equal(
        openssh.public.Key.ed,
        std.meta.activeTag(msg.sign_request.key),
    );
    try expect_equal(@as(u32, 0x00), msg.sign_request.flags);

    try expect_equal(msg, try Client.from_bytes(&bytes));
}

test "decode Failure" {
    const bytes = [_]u8{ 0x00, 0x00, 0x00, 0x01, 0x05 };

    const msg = try decode(Agent, &bytes);

    try expect_equal(Agent.failure, std.meta.activeTag(msg));
    try expect_equal(msg, try Agent.from_bytes(&bytes));
}

test "decode Success" {
    const bytes = [_]u8{ 0x00, 0x00, 0x00, 0x01, 0x06 };

    const msg = try decode(Agent, &bytes);
    try expect_equal(Agent.success, std.meta.activeTag(msg));

    try expect_equal(msg, try Agent.from_bytes(&bytes));
}

test "decode SignResponse" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x00, 0x58, 0x0e, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00,
        0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39,
        0x00, 0x00, 0x00, 0x40, 0x51, 0x83, 0xe6, 0x3e, 0x0e, 0x72, 0xa4, 0xe9,
        0x93, 0x4a, 0x4f, 0x48, 0x53, 0xa9, 0x82, 0x77, 0xa1, 0x42, 0x41, 0x46,
        0xf5, 0xf9, 0xb3, 0x5f, 0xdf, 0x86, 0xae, 0xa9, 0xe0, 0x9d, 0x03, 0xa7,
        0x01, 0x66, 0xc0, 0xad, 0xdf, 0xe8, 0xee, 0x8a, 0x3b, 0x3e, 0xf0, 0xe7,
        0x70, 0x30, 0xc5, 0x40, 0xab, 0xc0, 0x68, 0xe5, 0xf4, 0x27, 0x20, 0xe2,
        0x0b, 0x3c, 0x18, 0xeb, 0xd2, 0xa6, 0x8e, 0x0a
    }; // zig fmt: on

    const msg = try decode(Agent, &bytes);

    try expect_equal(Agent.sign_response, std.meta.activeTag(msg));
    try expect_equal(
        openssh.signature.Signature.ed,
        std.meta.activeTag(msg.sign_response.signature),
    );
}

test "decode/encode/decode SignResponse" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x00, 0x58, 0x0e, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00,
        0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39,
        0x00, 0x00, 0x00, 0x40, 0x51, 0x83, 0xe6, 0x3e, 0x0e, 0x72, 0xa4, 0xe9,
        0x93, 0x4a, 0x4f, 0x48, 0x53, 0xa9, 0x82, 0x77, 0xa1, 0x42, 0x41, 0x46,
        0xf5, 0xf9, 0xb3, 0x5f, 0xdf, 0x86, 0xae, 0xa9, 0xe0, 0x9d, 0x03, 0xa7,
        0x01, 0x66, 0xc0, 0xad, 0xdf, 0xe8, 0xee, 0x8a, 0x3b, 0x3e, 0xf0, 0xe7,
        0x70, 0x30, 0xc5, 0x40, 0xab, 0xc0, 0x68, 0xe5, 0xf4, 0x27, 0x20, 0xe2,
        0x0b, 0x3c, 0x18, 0xeb, 0xd2, 0xa6, 0x8e, 0x0a
    }; // zig fmt: on

    const msg = try decode(Agent, &bytes);

    try expect_equal(Agent.sign_response, std.meta.activeTag(msg));
    try expect_equal(
        openssh.signature.Signature.ed,
        std.meta.activeTag(msg.sign_response.signature),
    );

    var arr = std.ArrayList(u8).init(std.testing.allocator);
    defer arr.deinit();

    try msg.serialize(arr.writer().any());

    try expect_equal_slices(u8, &bytes, arr.items);

    const msg2 = try decode(Agent, arr.items);

    try expect_equal(Agent.sign_response, std.meta.activeTag(msg2));
    try expect_equal(
        openssh.signature.Signature.ed,
        std.meta.activeTag(msg.sign_response.signature),
    );
}

test "decode SignResponse 2" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x01, 0x99, 0x0E, 0x00, 0x00, 0x01, 0x94, 0x00, 0x00, 0x00,
        0x0C, 0x72, 0x73, 0x61, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x35, 0x31,
        0x32, 0x00, 0x00, 0x01, 0x80, 0x2E, 0x10, 0xBB, 0xFD, 0x64, 0x87, 0x43,
        0x9A, 0xF7, 0x52, 0x88, 0x61, 0x04, 0x0E, 0x74, 0xD7, 0x6F, 0x9D, 0xE0,
        0xDD, 0x6D, 0xE7, 0x71, 0xC7, 0xA1, 0x4A, 0x38, 0x97, 0x1D, 0x60, 0xFF,
        0xFC, 0x07, 0x72, 0x27, 0x4F, 0x11, 0x08, 0x7F, 0x37, 0xFF, 0x9B, 0x03,
        0xBF, 0x12, 0xE7, 0x54, 0xB5, 0xDC, 0xDE, 0x56, 0xC3, 0x4F, 0x63, 0xFB,
        0xE9, 0x80, 0x49, 0x9B, 0x0F, 0xC7, 0xD0, 0xEE, 0xA0, 0x2E, 0xC4, 0x73,
        0x60, 0x0D, 0x00, 0xB9, 0xEE, 0x87, 0x18, 0x9B, 0x3B, 0xE5, 0x69, 0x5E,
        0xF0, 0x72, 0x09, 0xCB, 0xEA, 0x3F, 0x1F, 0xC7, 0xA7, 0x43, 0xF6, 0xF4,
        0x59, 0xE9, 0x8B, 0xFA, 0x1C, 0x86, 0xB3, 0x9A, 0x2B, 0xE1, 0xC0, 0xBA,
        0xE1, 0x2E, 0x24, 0x11, 0x9D, 0xEB, 0xDE, 0xE6, 0x9B, 0x62, 0x11, 0x24,
        0xE2, 0xD3, 0xD8, 0xFE, 0x72, 0x00, 0x36, 0x24, 0x6D, 0x20, 0x43, 0x96,
        0x3F, 0x91, 0xB9, 0x0F, 0x0B, 0xD2, 0x8F, 0xC5, 0xF7, 0xE3, 0x34, 0xC5,
        0x55, 0xCC, 0x81, 0xAC, 0xC1, 0xB6, 0x3C, 0xF2, 0xA2, 0x54, 0x2D, 0x34,
        0xFA, 0x9D, 0xAA, 0x7A, 0x6B, 0x7E, 0x83, 0xBE, 0x0D, 0xBA, 0xD1, 0xA2,
        0x93, 0x0E, 0x26, 0xBC, 0x9A, 0xA8, 0x93, 0x4C, 0x53, 0x07, 0x16, 0x5B,
        0xB0, 0x0E, 0xCE, 0xA1, 0x51, 0x7A, 0xC4, 0xFC, 0x39, 0x83, 0x17, 0x04,
        0x06, 0x9B, 0x8D, 0x9F, 0x7A, 0x74, 0x7D, 0x52, 0x3F, 0x01, 0x58, 0x9F,
        0x93, 0xD0, 0x3C, 0x45, 0x9A, 0x38, 0xF4, 0x00, 0x9A, 0x7E, 0xF9, 0x0B,
        0xD1, 0xA2, 0x48, 0x15, 0xA4, 0x40, 0xC1, 0x21, 0xCE, 0x90, 0xD2, 0x13,
        0x13, 0xEA, 0x15, 0x08, 0xA2, 0x35, 0x71, 0x44, 0x69, 0x05, 0xCB, 0x31,
        0x2C, 0x41, 0x74, 0x3B, 0x9E, 0xC3, 0x4D, 0x84, 0xAC, 0x50, 0xA6, 0x22,
        0xC8, 0x5E, 0x8D, 0x3C, 0x70, 0xA9, 0xDC, 0xA6, 0x42, 0xFD, 0xEA, 0x4B,
        0x8C, 0x52, 0x98, 0x17, 0xA7, 0x49, 0x51, 0x14, 0xC4, 0x27, 0x5B, 0x01,
        0x33, 0x13, 0x30, 0x76, 0x70, 0xA6, 0xBB, 0x6E, 0x4C, 0xFE, 0xA0, 0xF5,
        0x30, 0xCD, 0xF3, 0x42, 0x0D, 0x5C, 0xDB, 0x8F, 0xC6, 0x78, 0x7C, 0xDC,
        0xAA, 0x11, 0x66, 0x02, 0x37, 0x06, 0x33, 0x03, 0xBD, 0x36, 0xEB, 0xF6,
        0x36, 0x00, 0x49, 0x5F, 0xA1, 0x01, 0x61, 0x28, 0xF8, 0xA2, 0xF6, 0xE3,
        0x6B, 0xF3, 0x8F, 0x68, 0x8F, 0xDB, 0x5F, 0xA6, 0x49, 0x29, 0x01, 0xA5,
        0xB2, 0xB8, 0xC8, 0x61, 0x40, 0x35, 0x02, 0x99, 0xEF, 0x17, 0xD1, 0xC6,
        0x76, 0xBD, 0xEC, 0x9E, 0xCC, 0x14, 0xCA, 0xB2, 0x04, 0x8A, 0x90, 0x02,
        0xA0, 0xDE, 0x7E, 0x91, 0x7B, 0x78, 0xD2, 0x23, 0x1B, 0xF4, 0xDE, 0x45,
        0x6F, 0xDD, 0xBE, 0xC7, 0x66, 0x5D, 0xEA, 0x1D, 0x6A, 0x64, 0x51, 0xBF,
        0x59, 0xCF, 0xE9, 0x18, 0xA8,
    }; // zig fmt: on

    const msg = try decode(Agent, &bytes);

    try expect_equal(Agent.sign_response, std.meta.activeTag(msg));
    try expect_equal(
        openssh.signature.Signature.rsa,
        std.meta.activeTag(msg.sign_response.signature),
    );
}

test "decode IdentitiesAnswer" {
    // zig fmt: off
    const bytes = [_]u8{
        0x00, 0x00, 0x00, 0x49, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x33, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32,
        0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30, 0xd1,
        0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a,
        0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda,
        0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x09, 0x6c, 0x6f, 0x63, 0x61,
        0x6c, 0x68, 0x6f, 0x73, 0x74
    };
    // zig fmt: on

    const msg = try decode(Agent, &bytes);

    try expect_equal(Agent.identities_answer, std.meta.activeTag(msg));

    var it = msg.identities_answer.iter().?;

    while (try it.next()) |pk| {
        try expect_equal(openssh.public.Key.ed, std.meta.activeTag(pk.key));
    }

    std.debug.assert(it.done());
}

test "decode IdentitiesAnswer 2" {
    // zig fmt: off
    const bytes = [_]u8{
        0x00, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01,
        0x97, 0x00, 0x00, 0x00, 0x07, 0x73, 0x73, 0x68, 0x2d, 0x72, 0x73, 0x61,
        0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x81, 0x00,
        0xd8, 0xf7, 0xa9, 0x7e, 0x42, 0x4b, 0x72, 0x07, 0x6b, 0xf0, 0x23, 0xce,
        0x42, 0x6f, 0xa1, 0x43, 0x61, 0x36, 0x2c, 0xdf, 0xa0, 0x38, 0xba, 0x3b,
        0xcf, 0x1e, 0xbe, 0x18, 0x42, 0x27, 0xce, 0x89, 0xbe, 0x62, 0x72, 0xbe,
        0xe1, 0x64, 0xce, 0x7a, 0x51, 0xcc, 0xfc, 0x0a, 0xba, 0x99, 0xc7, 0xb8,
        0xde, 0xa7, 0x74, 0xdf, 0xbd, 0x15, 0x46, 0x2b, 0xc6, 0x99, 0x3a, 0xe8,
        0xf7, 0xd6, 0x90, 0xcd, 0x71, 0x9f, 0x98, 0x53, 0x64, 0x87, 0x55, 0xf8,
        0x0a, 0xd3, 0x2e, 0x59, 0x02, 0x74, 0x10, 0x44, 0xfc, 0xeb, 0x80, 0x1d,
        0xbb, 0xf9, 0x48, 0x45, 0xd9, 0xd9, 0x13, 0xd6, 0x57, 0x5c, 0x36, 0x7d,
        0x89, 0xca, 0x1f, 0x2a, 0x1d, 0x01, 0x82, 0x23, 0x2b, 0x3d, 0x54, 0x8b,
        0x7f, 0xd4, 0x13, 0x13, 0x59, 0xf3, 0x5d, 0xdb, 0xd5, 0xbe, 0x40, 0x87,
        0x0a, 0xfc, 0xd6, 0xee, 0xc7, 0x08, 0x13, 0x91, 0xbf, 0x35, 0x9d, 0x42,
        0x93, 0x6d, 0x48, 0x40, 0x32, 0x85, 0x92, 0x5a, 0xbc, 0x7a, 0xca, 0xcc,
        0x86, 0x9e, 0x3a, 0x8f, 0x35, 0x4d, 0xf8, 0x5d, 0x9b, 0x50, 0x93, 0xbc,
        0xb9, 0x7b, 0xc4, 0xfe, 0x4c, 0x40, 0x58, 0x70, 0xb5, 0x49, 0x21, 0x15,
        0x13, 0x3d, 0xb6, 0x9a, 0xc4, 0x70, 0xf7, 0x9c, 0x57, 0xf9, 0x33, 0x08,
        0x14, 0x3e, 0x7f, 0xe8, 0x45, 0x7d, 0x70, 0xe6, 0x12, 0x75, 0x24, 0xe1,
        0x13, 0xb3, 0xa1, 0xc5, 0xb6, 0xe8, 0x6c, 0x57, 0x84, 0xa7, 0xb3, 0x0f,
        0x7b, 0xd5, 0x42, 0x01, 0x8c, 0xca, 0xc2, 0xc2, 0x8d, 0x06, 0x81, 0x0e,
        0xc1, 0x2b, 0xaa, 0x45, 0xbd, 0xd9, 0x9c, 0x22, 0x37, 0xbd, 0x73, 0xec,
        0xa4, 0xe3, 0x54, 0xa8, 0x91, 0xc1, 0xcd, 0xd0, 0x25, 0x9d, 0x2c, 0x14,
        0xa3, 0xfe, 0x24, 0x44, 0xb9, 0x7b, 0xb4, 0x29, 0xa7, 0x64, 0x3f, 0x6f,
        0xe1, 0xab, 0x8f, 0xbf, 0x35, 0x9d, 0x64, 0x30, 0x59, 0xe4, 0x57, 0xc3,
        0xb5, 0xe1, 0xe8, 0xfa, 0x7d, 0xb5, 0xd8, 0xc2, 0xfa, 0x88, 0x35, 0xa1,
        0x36, 0x31, 0x84, 0x82, 0x83, 0x6a, 0x80, 0x8b, 0x1b, 0x0a, 0xc7, 0x01,
        0x23, 0xd4, 0x88, 0xea, 0x73, 0x33, 0x8b, 0xf6, 0xc7, 0x3a, 0xb5, 0x76,
        0xfd, 0x5b, 0x86, 0xc1, 0x2a, 0x23, 0x2a, 0x44, 0x62, 0x15, 0xb7, 0x2f,
        0x01, 0x4c, 0x12, 0x8e, 0x0e, 0x96, 0x00, 0x7b, 0x83, 0x69, 0x55, 0x1a,
        0xdc, 0xa0, 0x0a, 0x37, 0x1a, 0x80, 0x5e, 0xe9, 0x47, 0x0c, 0xbc, 0xa0,
        0xf8, 0x73, 0x89, 0xe1, 0x92, 0x6e, 0x78, 0xa9, 0xb0, 0x3b, 0x5a, 0x05,
        0xa9, 0x6d, 0xe4, 0x10, 0x4a, 0x61, 0x36, 0xef, 0x9e, 0x45, 0xf7, 0x55,
        0x9e, 0x43, 0xfe, 0x87, 0x8e, 0x91, 0x5a, 0xbe, 0xdc, 0xc2, 0x83, 0x17,
        0x6d, 0xcc, 0x83, 0x23, 0x1d, 0x65, 0xd6, 0x4c, 0xd4, 0xf2, 0xac, 0x4b,
        0x00, 0x00, 0x00, 0x1c, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6d, 0x6c,
        0x73, 0x6f, 0x2f, 0x64, 0x65, 0x76, 0x2f, 0x6b, 0x72, 0x73, 0x2d, 0x61,
        0x67, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x73, 0x61,
    };
    // zig fmt: on

    const msg = try decode(Agent, &bytes);

    try expect_equal(Agent.identities_answer, std.meta.activeTag(msg));

    var it = msg.identities_answer.iter().?;

    while (try it.next()) |pk| {
        try expect_equal(openssh.public.Key.rsa, std.meta.activeTag(pk.key));
    }

    std.debug.assert(it.done());
}

test "decode IdentitiesAnswer (no keys)" {
    const bytes = [_]u8{ 0x00, 0x00, 0x00, 0x05, 0x0c, 0x00, 0x00, 0x00, 0x00 };

    const msg = try decode(Agent, &bytes);
    try expect_equal(Agent.identities_answer, std.meta.activeTag(msg));
    try expect_equal(0, msg.identities_answer.nkeys);
    try expect_equal(null, msg.identities_answer.iter());
}

test "decode RemoveIdentity" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x00, 0x38, 0x12, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00,
        0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39,
        0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f, 0x4d, 0xbd,
        0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a, 0x68, 0x69, 0xa4, 0xec,
        0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f
    }; // zig fmt: on

    const msg = try decode(Client, &bytes);

    try expect_equal(Client.remove_identity, std.meta.activeTag(msg));
    try expect_equal(openssh.public.Key.ed, std.meta.activeTag(msg.remove_identity.key));
}

test "decode SignRequest" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x01, 0x44, 0x0d, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00,
        0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39,
        0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f, 0x4d, 0xbd,
        0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a, 0x68, 0x69, 0xa4, 0xec,
        0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f,
        0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x40, 0xe8, 0x1c, 0xcc, 0x8a,
        0xb2, 0x6b, 0xf1, 0xf2, 0x82, 0x3b, 0xf7, 0xe4, 0xb7, 0x89, 0xdf, 0x28,
        0x9d, 0xbc, 0x67, 0xeb, 0x52, 0x43, 0x48, 0x20, 0xef, 0x08, 0x7d, 0xa4,
        0xd8, 0xda, 0xd0, 0xbe, 0xb0, 0x2f, 0x5a, 0x6e, 0x4a, 0x7b, 0x6e, 0x62,
        0x29, 0xd3, 0x99, 0x7e, 0x54, 0x17, 0x44, 0x54, 0xaa, 0x04, 0x3b, 0x86,
        0xc3, 0x53, 0xaa, 0xa8, 0xab, 0x9d, 0x3f, 0xb6, 0x51, 0x03, 0x16, 0xa2,
        0x32, 0x00, 0x00, 0x00, 0x04, 0x6d, 0x6c, 0x73, 0x6f, 0x00, 0x00, 0x00,
        0x0e, 0x73, 0x73, 0x68, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
        0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x23, 0x70, 0x75, 0x62, 0x6c, 0x69,
        0x63, 0x6b, 0x65, 0x79, 0x2d, 0x68, 0x6f, 0x73, 0x74, 0x62, 0x6f, 0x75,
        0x6e, 0x64, 0x2d, 0x76, 0x30, 0x30, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73,
        0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x73,
        0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00,
        0x00, 0x33, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64,
        0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30,
        0xd1, 0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7,
        0x0a, 0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a,
        0xda, 0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00,
        0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39,
        0x00, 0x00, 0x00, 0x20, 0x11, 0xdf, 0xf7, 0x5f, 0x5b, 0xa3, 0xf8, 0x56,
        0x08, 0xaa, 0x42, 0xaa, 0x7b, 0x7d, 0x74, 0xe5, 0x05, 0x2b, 0x9d, 0xe0,
        0xe5, 0xeb, 0x0f, 0x16, 0xa4, 0xd9, 0xe2, 0x64, 0xc6, 0x77, 0x7f, 0xc3,
        0x00, 0x00, 0x00, 0x00
    }; // zig fmt: on

    const msg = try decode(Client, &bytes);

    try expect_equal(Client.sign_request, std.meta.activeTag(msg));
    try expect_equal(
        openssh.public.Key.ed,
        std.meta.activeTag(msg.sign_request.key),
    );

    // TODO: msg.sign_request.data
}

test "decode Lock" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x00, 0x08, 0x16, 0x00, 0x00, 0x00, 0x03, 0x31, 0x32, 0x33,
    }; // zig fmt: on

    const msg = try decode(Client, &bytes);

    try expect_equal(Client.lock, std.meta.activeTag(msg));
    try expect_equal_strings("123", msg.lock.passphrase);
}

test "decode Unlock" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x00, 0x08, 0x17, 0x00, 0x00, 0x00, 0x03, 0x31, 0x32, 0x33,
    }; // zig fmt: on

    const msg = try decode(Client, &bytes);

    try expect_equal(Client.unlock, std.meta.activeTag(msg));
    try expect_equal_strings("123", msg.unlock.passphrase);
}

test "decode Extension (SessionBind)" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x00, 0xf0, 0x1b, 0x00, 0x00, 0x00, 0x18, 0x73, 0x65, 0x73,
        0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x40, 0x6f, 0x70,
        0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x00,
        0x33, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32,
        0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20, 0x11, 0xdf, 0xf7, 0x5f,
        0x5b, 0xa3, 0xf8, 0x56, 0x08, 0xaa, 0x42, 0xaa, 0x7b, 0x7d, 0x74, 0xe5,
        0x05, 0x2b, 0x9d, 0xe0, 0xe5, 0xeb, 0x0f, 0x16, 0xa4, 0xd9, 0xe2, 0x64,
        0xc6, 0x77, 0x7f, 0xc3, 0x00, 0x00, 0x00, 0x40, 0x4b, 0xd3, 0xc6, 0xca,
        0xeb, 0xa6, 0xc9, 0x86, 0xee, 0x45, 0x0a, 0x03, 0xfb, 0x8b, 0x60, 0xfb,
        0xaf, 0x9f, 0x40, 0x25, 0x09, 0x72, 0x5d, 0xe8, 0x8c, 0xc6, 0xb3, 0x10,
        0x0b, 0x13, 0x06, 0x41, 0x72, 0x41, 0x77, 0x69, 0x16, 0xb5, 0x94, 0x65,
        0x4e, 0xac, 0x47, 0xb0, 0x0c, 0x97, 0x59, 0xf5, 0xbd, 0xd2, 0x23, 0x4c,
        0x41, 0xf3, 0x2b, 0x3d, 0xaa, 0xbb, 0xbb, 0x6e, 0xad, 0x04, 0xbf, 0xdb,
        0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d,
        0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x40, 0x0b,
        0xb7, 0x0e, 0xdc, 0xd5, 0x6b, 0x5e, 0xe4, 0x40, 0x03, 0x7d, 0x58, 0x13,
        0x9a, 0xce, 0xdf, 0x49, 0xd7, 0x54, 0xc8, 0x6a, 0xac, 0x46, 0x7f, 0x3d,
        0xac, 0xb1, 0xec, 0xe8, 0xaa, 0x0e, 0x25, 0xcf, 0x29, 0xe6, 0xd8, 0x49,
        0x1d, 0xf3, 0xa4, 0x17, 0xf9, 0x8d, 0xd1, 0xb2, 0x5e, 0x94, 0xb6, 0xc0,
        0x4f, 0xb3, 0x90, 0x88, 0x42, 0xc4, 0x2c, 0x1e, 0xe9, 0xa4, 0x0c, 0x7c,
        0x4e, 0xc0, 0x07, 0x00
    }; // zig fmt: on

    const msg = try decode(Client, &bytes);

    try expect_equal(Client.extension, std.meta.activeTag(msg));
    try expect_equal(
        Client.Extension.@"session-bind@openssh.com",
        std.meta.activeTag(msg.extension),
    );
}

test "decode AddIdConstrained" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x00, 0x8a, 0x19, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68,
        0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20,
        0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27,
        0x2e, 0x0a, 0xb7, 0x0a, 0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef,
        0x7f, 0x3a, 0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x40,
        0x2e, 0x42, 0x1c, 0xd6, 0x38, 0xab, 0xf3, 0x1e, 0x5c, 0x3e, 0x02, 0x61,
        0x20, 0xe5, 0xb4, 0xa5, 0x36, 0x7a, 0xe3, 0x45, 0xf2, 0x67, 0xa3, 0x56,
        0xf1, 0x47, 0x9c, 0x2a, 0x89, 0x4b, 0x45, 0xa6, 0xc2, 0xd0, 0x30, 0xd1,
        0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a,
        0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda,
        0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x09, 0x6c, 0x6f, 0x63, 0x61,
        0x6c, 0x68, 0x6f, 0x73, 0x74, 0x01, 0x00, 0x00, 0x00, 0x0a
    }; // zig fmt: on

    const refrences = [_]Client.Constraints.Constraint{
        .{ .lifetime = .{ .sec = 10 } },
    };

    const msg = try decode(Client, &bytes);

    var it = msg.add_id_constrained.constraints.iter();

    for (refrences) |refrence| {
        try expect_equal(refrence, try it.next());
    }

    try expect(it.done());
}

test "decoded AddIdConstrained" {
    const bytes = [_]u8{ // zig fmt: off
        0x00, 0x00, 0x00, 0x8b, 0x19, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68,
        0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20,
        0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27,
        0x2e, 0x0a, 0xb7, 0x0a, 0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef,
        0x7f, 0x3a, 0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x40,
        0x2e, 0x42, 0x1c, 0xd6, 0x38, 0xab, 0xf3, 0x1e, 0x5c, 0x3e, 0x02, 0x61,
        0x20, 0xe5, 0xb4, 0xa5, 0x36, 0x7a, 0xe3, 0x45, 0xf2, 0x67, 0xa3, 0x56,
        0xf1, 0x47, 0x9c, 0x2a, 0x89, 0x4b, 0x45, 0xa6, 0xc2, 0xd0, 0x30, 0xd1,
        0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a,
        0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda,
        0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x09, 0x6c, 0x6f, 0x63, 0x61,
        0x6c, 0x68, 0x6f, 0x73, 0x74, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x02
    }; // zig fmt: on

    const refrences = [_]Client.Constraints.Constraint{
        .{ .lifetime = .{ .sec = 10 } },
        .confirm,
    };

    const msg = try decode(Client, &bytes);

    var it = msg.add_id_constrained.constraints.iter();

    for (refrences) |refrence| {
        try expect_equal(refrence, try it.next());
    }

    try expect(it.done());
}

const client_inputs = std.testing.FuzzInputOptions{
    // zig fmt: off
    .corpus = &[_][]const u8{
        // AddIdConstrained
        [_]u8{ 0x00, 0x00, 0x00, 0x8b, 0x19, 0x00, 0x00, 0x00, 0x0b, 0x73,
            0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00,
            0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f, 0x4d, 0xbd,
            0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a, 0x68, 0x69, 0xa4,
            0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda, 0x93, 0x31,
            0x39, 0x4f, 0x00, 0x00, 0x00, 0x40, 0x2e, 0x42, 0x1c, 0xd6, 0x38,
            0xab, 0xf3, 0x1e, 0x5c, 0x3e, 0x02, 0x61, 0x20, 0xe5, 0xb4, 0xa5,
            0x36, 0x7a, 0xe3, 0x45, 0xf2, 0x67, 0xa3, 0x56, 0xf1, 0x47, 0x9c,
            0x2a, 0x89, 0x4b, 0x45, 0xa6, 0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f,
            0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a, 0x68,
            0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda,
            0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x09, 0x6c, 0x6f, 0x63,
            0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x01, 0x00, 0x00, 0x00, 0x0a,
            0x02 },

        // Extension (SessionBind)
        [_]u8{ 0x00, 0x00, 0x00, 0xf0, 0x1b, 0x00, 0x00, 0x00, 0x18, 0x73,
            0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x62, 0x69, 0x6e, 0x64,
            0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f,
            0x6d, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73,
            0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00,
            0x00, 0x20, 0x11, 0xdf, 0xf7, 0x5f, 0x5b, 0xa3, 0xf8, 0x56, 0x08,
            0xaa, 0x42, 0xaa, 0x7b, 0x7d, 0x74, 0xe5, 0x05, 0x2b, 0x9d, 0xe0,
            0xe5, 0xeb, 0x0f, 0x16, 0xa4, 0xd9, 0xe2, 0x64, 0xc6, 0x77, 0x7f,
            0xc3, 0x00, 0x00, 0x00, 0x40, 0x4b, 0xd3, 0xc6, 0xca, 0xeb, 0xa6,
            0xc9, 0x86, 0xee, 0x45, 0x0a, 0x03, 0xfb, 0x8b, 0x60, 0xfb, 0xaf,
            0x9f, 0x40, 0x25, 0x09, 0x72, 0x5d, 0xe8, 0x8c, 0xc6, 0xb3, 0x10,
            0x0b, 0x13, 0x06, 0x41, 0x72, 0x41, 0x77, 0x69, 0x16, 0xb5, 0x94,
            0x65, 0x4e, 0xac, 0x47, 0xb0, 0x0c, 0x97, 0x59, 0xf5, 0xbd, 0xd2,
            0x23, 0x4c, 0x41, 0xf3, 0x2b, 0x3d, 0xaa, 0xbb, 0xbb, 0x6e, 0xad,
            0x04, 0xbf, 0xdb, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x0b,
            0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39,
            0x00, 0x00, 0x00, 0x40, 0x0b, 0xb7, 0x0e, 0xdc, 0xd5, 0x6b, 0x5e,
            0xe4, 0x40, 0x03, 0x7d, 0x58, 0x13, 0x9a, 0xce, 0xdf, 0x49, 0xd7,
            0x54, 0xc8, 0x6a, 0xac, 0x46, 0x7f, 0x3d, 0xac, 0xb1, 0xec, 0xe8,
            0xaa, 0x0e, 0x25, 0xcf, 0x29, 0xe6, 0xd8, 0x49, 0x1d, 0xf3, 0xa4,
            0x17, 0xf9, 0x8d, 0xd1, 0xb2, 0x5e, 0x94, 0xb6, 0xc0, 0x4f, 0xb3,
            0x90, 0x88, 0x42, 0xc4, 0x2c, 0x1e, 0xe9, 0xa4, 0x0c, 0x7c, 0x4e,
            0xc0, 0x07, 0x00 },

        // SignRequest
        [_]u8{ 0x00, 0x00, 0x01, 0x44, 0x0d, 0x00, 0x00, 0x00, 0x33, 0x00,
            0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35,
            0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30, 0xd1,
            0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7,
            0x0a, 0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a,
            0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x01, 0x04, 0x00,
            0x00, 0x00, 0x40, 0x74, 0x7c, 0x79, 0x32, 0x4c, 0xbd, 0xca, 0xde,
            0x25, 0x6d, 0x94, 0xcb, 0x94, 0xc8, 0x04, 0xa1, 0x77, 0x18, 0x2e,
            0x4d, 0x16, 0xd3, 0xa7, 0x33, 0x92, 0x21, 0xa1, 0x57, 0x60, 0x7c,
            0x7d, 0xea, 0xd8, 0xe8, 0xe4, 0x3d, 0x6f, 0x85, 0xe5, 0x7a, 0x39,
            0xcb, 0xe7, 0x6e, 0xf0, 0xc5, 0x66, 0xd8, 0xc9, 0x52, 0x67, 0x1e,
            0x70, 0x77, 0x6e, 0x6e, 0x97, 0x0a, 0x42, 0x21, 0x96, 0x28, 0x5e,
            0x25, 0x32, 0x00, 0x00, 0x00, 0x04, 0x6d, 0x6c, 0x73, 0x6f, 0x00,
            0x00, 0x00, 0x0e, 0x73, 0x73, 0x68, 0x2d, 0x63, 0x6f, 0x6e, 0x6e,
            0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x23, 0x70,
            0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x2d, 0x68, 0x6f,
            0x73, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x76, 0x30, 0x30,
            0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f,
            0x6d, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65,
            0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x33, 0x00,
            0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35,
            0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30, 0xd1,
            0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7,
            0x0a, 0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a,
            0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x33, 0x00,
            0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35,
            0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20, 0x11, 0xdf, 0xf7, 0x5f,
            0x5b, 0xa3, 0xf8, 0x56, 0x08, 0xaa, 0x42, 0xaa, 0x7b, 0x7d, 0x74,
            0xe5, 0x05, 0x2b, 0x9d, 0xe0, 0xe5, 0xeb, 0x0f, 0x16, 0xa4, 0xd9,
            0xe2, 0x64, 0xc6, 0x77, 0x7f, 0xc3, 0x00, 0x00, 0x00, 0x00 },

        // AddIdentity
        [_]u8{ 0x00, 0x00, 0x00, 0x85, 0x11, 0x00, 0x00, 0x00, 0x0b, 0x73,
            0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00,
            0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f, 0x4d, 0xbd,
            0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a, 0x68, 0x69, 0xa4,
            0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda, 0x93, 0x31,
            0x39, 0x4f, 0x00, 0x00, 0x00, 0x40, 0x2e, 0x42, 0x1c, 0xd6, 0x38,
            0xab, 0xf3, 0x1e, 0x5c, 0x3e, 0x02, 0x61, 0x20, 0xe5, 0xb4, 0xa5,
            0x36, 0x7a, 0xe3, 0x45, 0xf2, 0x67, 0xa3, 0x56, 0xf1, 0x47, 0x9c,
            0x2a, 0x89, 0x4b, 0x45, 0xa6, 0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f,
            0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a, 0x68,
            0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda,
            0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x09, 0x6c, 0x6f, 0x63,
            0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74 },

        // Signature
        [_]u8{ 0x00, 0x00, 0x01, 0x44, 0x0d, 0x00, 0x00, 0x00, 0x33, 0x00,
            0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35,
            0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30, 0xd1,
            0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7,
            0x0a, 0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a,
            0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x01, 0x04, 0x00,
            0x00, 0x00, 0x40, 0x74, 0x7c, 0x79, 0x32, 0x4c, 0xbd, 0xca, 0xde,
            0x25, 0x6d, 0x94, 0xcb, 0x94, 0xc8, 0x04, 0xa1, 0x77, 0x18, 0x2e,
            0x4d, 0x16, 0xd3, 0xa7, 0x33, 0x92, 0x21, 0xa1, 0x57, 0x60, 0x7c,
            0x7d, 0xea, 0xd8, 0xe8, 0xe4, 0x3d, 0x6f, 0x85, 0xe5, 0x7a, 0x39,
            0xcb, 0xe7, 0x6e, 0xf0, 0xc5, 0x66, 0xd8, 0xc9, 0x52, 0x67, 0x1e,
            0x70, 0x77, 0x6e, 0x6e, 0x97, 0x0a, 0x42, 0x21, 0x96, 0x28, 0x5e,
            0x25, 0x32, 0x00, 0x00, 0x00, 0x04, 0x6d, 0x6c, 0x73, 0x6f, 0x00,
            0x00, 0x00, 0x0e, 0x73, 0x73, 0x68, 0x2d, 0x63, 0x6f, 0x6e, 0x6e,
            0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x23, 0x70,
            0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x2d, 0x68, 0x6f,
            0x73, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x76, 0x30, 0x30,
            0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f,
            0x6d, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65,
            0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x33, 0x00,
            0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35,
            0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30, 0xd1,
            0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7,
            0x0a, 0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a,
            0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x33, 0x00,
            0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35,
            0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20, 0x11, 0xdf, 0xf7, 0x5f,
            0x5b, 0xa3, 0xf8, 0x56, 0x08, 0xaa, 0x42, 0xaa, 0x7b, 0x7d, 0x74,
            0xe5, 0x05, 0x2b, 0x9d, 0xe0, 0xe5, 0xeb, 0x0f, 0x16, 0xa4, 0xd9,
            0xe2, 0x64, 0xc6, 0x77, 0x7f, 0xc3, 0x00, 0x00, 0x00, 0x00 },
    },
    // zig fmt: on
};

fn MakeContext(comptime T: type) type {
    return struct {
        const Self = @This();

        pub var rng = std.Random.DefaultPrng.init(0);

        fn perturb(input: []u8) []u8 {
            const i = rng.random().intRangeLessThan(usize, 0, input.len);

            input[i] ^= rng.random().int(u8);

            return input;
        }

        fn fuzz(_: Self, input: []const u8) anyerror!void {
            if (input.len < 4) return;

            const in = std.testing.allocator.dupe(u8, input) catch
                @panic("OOM");
            defer std.testing.allocator.free(in);

            _ = decode(T, perturb(in)) catch return;
        }
    };
}

test "fuzz Client" {
    const Context = MakeContext(Client);

    try std.testing.fuzz(Context{}, Context.fuzz, .{});
}

test "fuzz Agent" {
    const Context = MakeContext(Agent);

    try std.testing.fuzz(Context{}, Context.fuzz, .{});
}

test "serialize Agent.failure" {
    const msg = @unionInit(Agent, "failure", {});

    var arr = std.ArrayList(u8).init(std.testing.allocator);
    defer arr.deinit();

    try msg.serialize(arr.writer().any());

    try expect_equal_strings(&[_]u8{ 0x00, 0x00, 0x00, 0x01, 0x05 }, arr.items);
}

test "serialize Agent.success" {
    const msg = @unionInit(Agent, "success", {});

    var arr = std.ArrayList(u8).init(std.testing.allocator);
    defer arr.deinit();

    try msg.serialize(arr.writer().any());

    try expect_equal(5, msg.encoded_size());
    try expect_equal_strings(&[_]u8{ 0x00, 0x00, 0x00, 0x01, 0x06 }, arr.items);
}

test "serialize Agent.extension_failure" {
    const msg = @unionInit(Agent, "extension_failure", {});

    var arr = std.ArrayList(u8).init(std.testing.allocator);
    defer arr.deinit();

    try msg.serialize(arr.writer().any());

    try expect_equal(5, msg.encoded_size());
    try expect_equal_strings(&[_]u8{ 0x00, 0x00, 0x00, 0x01, 0x1C }, arr.items);
}
