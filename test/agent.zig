const std = @import("std");
const zssh = @import("zssh");

const Client = zssh.agent.Client;
const expect_equal = std.testing.expectEqual;
const expect_error = std.testing.expectError;

test "can parse SSH_AGENTC_REQUEST_IDENTITIES" {
    const bytes = [_]u8{ 0x00, 0x00, 0x00, 0x01, 0x0B };

    const msg_len = std.mem.readInt(u32, bytes[0..4], .big);

    const msg = try zssh.agent.decode(Client, bytes[4 .. 4 + msg_len]);

    try expect_equal(Client.request_identities, msg);
}

test "invalid client msg" {
    const bytes = [_]u8{ 0x00, 0x00, 0x00, 0x01, 0x0C };

    const msg_len = std.mem.readInt(u32, bytes[0..4], .big);

    try expect_error(
        error.InvalidMsgType,
        zssh.agent.decode(Client, bytes[4 .. 4 + msg_len]),
    );
}

test Client {
    const too_short = [_]u8{ 0x00, 0x00, 0x00 };

    try expect_error(error.MessageTooShort, Client.from_bytes(&too_short));

    const mismatch = [_]u8{ 0x00, 0x00, 0x00, 0xAA, 0x00 };

    try expect_error(error.MsgLenMismatch, Client.from_bytes(&mismatch));
}

test "decode AddIdentity" {
    // 00 00 00 85 11 00 00 00 0b 73 73 68 2d 65 64 32  .........ssh-ed2
    // 35 35 31 39 00 00 00 20 c2 d0 30 d1 19 0f 4d bd  5519... ..0...M.
    // e4 c1 57 27 2e 0a b7 0a 68 69 a4 ec d9 ec 68 ef  ..W'....hi....h.
    // 7f 3a 6a da 93 31 39 4f 00 00 00 40 2e 42 1c d6  .:j..19O...@.B..
    // 38 ab f3 1e 5c 3e 02 61 20 e5 b4 a5 36 7a e3 45  8...\>.a ...6z.E
    // f2 67 a3 56 f1 47 9c 2a 89 4b 45 a6 c2 d0 30 d1  .g.V.G.*.KE...0.
    // 19 0f 4d bd e4 c1 57 27 2e 0a b7 0a 68 69 a4 ec  ..M...W'....hi..
    // d9 ec 68 ef 7f 3a 6a da 93 31 39 4f 00 00 00 09  ..h..:j..19O....
    // 6c 6f 63 61 6c 68 6f 73 74                       localhost
    const bytes = [_]u8{ 0x00, 0x00, 0x00, 0x85, 0x11, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a, 0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x40, 0x2e, 0x42, 0x1c, 0xd6, 0x38, 0xab, 0xf3, 0x1e, 0x5c, 0x3e, 0x02, 0x61, 0x20, 0xe5, 0xb4, 0xa5, 0x36, 0x7a, 0xe3, 0x45, 0xf2, 0x67, 0xa3, 0x56, 0xf1, 0x47, 0x9c, 0x2a, 0x89, 0x4b, 0x45, 0xa6, 0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a, 0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74 };

    const msg_len = std.mem.readInt(u32, bytes[0..4], .big);

    try expect_equal(133, msg_len);

    const msg = try zssh.agent.decode(Client, bytes[4 .. 4 + msg_len]);

    try expect_equal(
        zssh.agent.Client.add_identity,
        std.meta.activeTag(msg),
    );
    try expect_equal(
        zssh.agent.Sk.ed25519,
        std.meta.activeTag(msg.add_identity.key),
    );

    try expect_equal(msg, try Client.from_bytes(&bytes));
}

test "decode Signature" {
    // 00 00 01 44 0d 00 00 00 33 00 00 00 0b 73 73 68  ...D....3....ssh
    // 2d 65 64 32 35 35 31 39 00 00 00 20 c2 d0 30 d1  -ed25519... ..0.
    // 19 0f 4d bd e4 c1 57 27 2e 0a b7 0a 68 69 a4 ec  ..M...W'....hi..
    // d9 ec 68 ef 7f 3a 6a da 93 31 39 4f 00 00 01 04  ..h..:j..19O....
    // 00 00 00 40 74 7c 79 32 4c bd ca de 25 6d 94 cb  ...@t|y2L...%m..
    // 94 c8 04 a1 77 18 2e 4d 16 d3 a7 33 92 21 a1 57  ....w..M...3.!.W
    // 60 7c 7d ea d8 e8 e4 3d 6f 85 e5 7a 39 cb e7 6e  `|}....=o..z9..n
    // f0 c5 66 d8 c9 52 67 1e 70 77 6e 6e 97 0a 42 21  ..f..Rg.pwnn..B!
    // 96 28 5e 25 32 00 00 00 04 6d 6c 73 6f 00 00 00  .(^%2....mlso...
    // 0e 73 73 68 2d 63 6f 6e 6e 65 63 74 69 6f 6e 00  .ssh-connection.
    // 00 00 23 70 75 62 6c 69 63 6b 65 79 2d 68 6f 73  ..#publickey-hos
    // 74 62 6f 75 6e 64 2d 76 30 30 40 6f 70 65 6e 73  tbound-v00@opens
    // 73 68 2e 63 6f 6d 01 00 00 00 0b 73 73 68 2d 65  sh.com.....ssh-e
    // 64 32 35 35 31 39 00 00 00 33 00 00 00 0b 73 73  d25519...3....ss
    // 68 2d 65 64 32 35 35 31 39 00 00 00 20 c2 d0 30  h-ed25519... ..0
    // d1 19 0f 4d bd e4 c1 57 27 2e 0a b7 0a 68 69 a4  ...M...W'....hi.
    // ec d9 ec 68 ef 7f 3a 6a da 93 31 39 4f 00 00 00  ...h..:j..19O...
    // 33 00 00 00 0b 73 73 68 2d 65 64 32 35 35 31 39  3....ssh-ed25519
    // 00 00 00 20 11 df f7 5f 5b a3 f8 56 08 aa 42 aa  ... ..._[..V..B.
    // 7b 7d 74 e5 05 2b 9d e0 e5 eb 0f 16 a4 d9 e2 64  {}t..+.........d
    // c6 77 7f c3 00 00 00 00                          .w......
    const bytes = [_]u8{ 0x00, 0x00, 0x01, 0x44, 0x0d, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a, 0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x40, 0x74, 0x7c, 0x79, 0x32, 0x4c, 0xbd, 0xca, 0xde, 0x25, 0x6d, 0x94, 0xcb, 0x94, 0xc8, 0x04, 0xa1, 0x77, 0x18, 0x2e, 0x4d, 0x16, 0xd3, 0xa7, 0x33, 0x92, 0x21, 0xa1, 0x57, 0x60, 0x7c, 0x7d, 0xea, 0xd8, 0xe8, 0xe4, 0x3d, 0x6f, 0x85, 0xe5, 0x7a, 0x39, 0xcb, 0xe7, 0x6e, 0xf0, 0xc5, 0x66, 0xd8, 0xc9, 0x52, 0x67, 0x1e, 0x70, 0x77, 0x6e, 0x6e, 0x97, 0x0a, 0x42, 0x21, 0x96, 0x28, 0x5e, 0x25, 0x32, 0x00, 0x00, 0x00, 0x04, 0x6d, 0x6c, 0x73, 0x6f, 0x00, 0x00, 0x00, 0x0e, 0x73, 0x73, 0x68, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x23, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x2d, 0x68, 0x6f, 0x73, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x76, 0x30, 0x30, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20, 0xc2, 0xd0, 0x30, 0xd1, 0x19, 0x0f, 0x4d, 0xbd, 0xe4, 0xc1, 0x57, 0x27, 0x2e, 0x0a, 0xb7, 0x0a, 0x68, 0x69, 0xa4, 0xec, 0xd9, 0xec, 0x68, 0xef, 0x7f, 0x3a, 0x6a, 0xda, 0x93, 0x31, 0x39, 0x4f, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x20, 0x11, 0xdf, 0xf7, 0x5f, 0x5b, 0xa3, 0xf8, 0x56, 0x08, 0xaa, 0x42, 0xaa, 0x7b, 0x7d, 0x74, 0xe5, 0x05, 0x2b, 0x9d, 0xe0, 0xe5, 0xeb, 0x0f, 0x16, 0xa4, 0xd9, 0xe2, 0x64, 0xc6, 0x77, 0x7f, 0xc3, 0x00, 0x00, 0x00, 0x00 };

    const msg_len = std.mem.readInt(u32, bytes[0..4], .big);

    try expect_equal(324, msg_len);

    const msg = try zssh.agent.decode(Client, bytes[4 .. 4 + msg_len]);

    try expect_equal(
        zssh.agent.Client.sign_request,
        std.meta.activeTag(msg),
    );
    try expect_equal(
        zssh.pk.Pk.ed25519,
        std.meta.activeTag(msg.sign_request.key),
    );
    try expect_equal(@as(u32, 0x00), msg.sign_request.flags);

    try expect_equal(msg, try Client.from_bytes(&bytes));
}
